// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  password       String
  role           Role @default(STUDENT)
  enrollments    Enrollment[]  // Inscripciones del usuario
  attendance     Attendance[]  // Asistencias del usuario
  grades         Grade[]       // Calificaciones del usuario
  taughtCourses  Course[]      @relation("TeacherCourses") // Cursos que el usuario enseña
  certificates   Certificate[] // Certificados emitidos para el usuario
  userProfile    UserProfile?
}

model UserProfile {
  id         String  @id @default(uuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String  @unique
  phone      String?
  address    String?
  birthdate  DateTime?
}


model Course {
  id             String        @id @default(uuid())
  name           String
  teacher        User          @relation(fields: [teacherId], references: [id], name: "TeacherCourses")
  teacherId      String
  students       Enrollment[]  // Estudiantes inscritos en el curso
  attendance     Attendance[]  // Asistencias registradas en el curso
  grades         Grade[]       // Calificaciones asignadas en el curso
  certificates   Certificate[] // Certificados emitidos para este curso
}

model Enrollment {
  id             String  @id @default(uuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String
  course         Course  @relation(fields: [courseId], references: [id])
  courseId       String
  status         String  // Estado de la inscripción (e.g., "active", "completed")
}

model Attendance {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  course         Course   @relation(fields: [courseId], references: [id])
  courseId       String
  date           DateTime
  present        Boolean  // Indica si el usuario estuvo presente
}

model Grade {
  id             String  @id @default(uuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String
  course         Course  @relation(fields: [courseId], references: [id])
  courseId       String
  score          Float   // Calificación del usuario en el curso
}

model Certificate {
  id             String  @id @default(uuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String
  course         Course  @relation(fields: [courseId], references: [id])
  courseId       String
  url            String  // URL del PDF generado
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

